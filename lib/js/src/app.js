// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var $$Array                 = require("bs-platform/lib/js/array.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var React                   = require("react");
var CatList                 = require("./catList.js");
var Js_json                 = require("bs-platform/lib/js/js_json.js");
var ReactRe                 = require("reason-react/lib/js/src/reactRe.js");
var Caml_array              = require("bs-platform/lib/js/caml_array.js");
var ReactDOMRe              = require("reason-react/lib/js/src/reactDOMRe.js");
var Js$slashhelpers         = require("js/helpers");
var Js_primitive            = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function unwrapUnsafely(param) {
  if (param) {
    return param[0];
  } else {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "unwrapUnsafely called on None"
        ];
  }
}

var Option = /* module */[/* unwrapUnsafely */unwrapUnsafely];

function getPics() {
  return fetch("http://mapd-cats.azurewebsites.net/catpics").then(function (prim) {
                return prim.text();
              }).then(function (xml) {
              return Promise.resolve(Js$slashhelpers.gatherImages(xml));
            });
}

function getFacts() {
  return fetch("http://mapd-cats.azurewebsites.net/catfacts").then(function (prim) {
                return prim.json();
              }).then(function (json) {
              var d = unwrapUnsafely(Js_json.decodeObject(json));
              return Promise.resolve(unwrapUnsafely(Js_json.decodeArray(unwrapUnsafely(Js_primitive.undefined_to_opt(d["facts"])))));
            });
}

function getCats() {
  return Promise.all(/* array */[
                getPics(/* () */0),
                getFacts(/* () */0)
              ]).then(function (param) {
              if (param.length !== 2) {
                throw [
                      Caml_builtin_exceptions.match_failure,
                      [
                        "/Users/Tai/workspace/cats-re/src/app.re",
                        27,
                        12
                      ]
                    ];
              } else {
                var images = param[0];
                var facts = param[1];
                return Promise.resolve($$Array.to_list($$Array.mapi(function (i, x) {
                                    var img = unwrapUnsafely(Js_json.decodeString(x));
                                    var fct = unwrapUnsafely(Js_json.decodeString(Caml_array.caml_array_get(facts, i)));
                                    return /* record */[
                                            /* id */i,
                                            /* fact */fct,
                                            /* image */img,
                                            /* isHidden : false */0
                                          ];
                                  }, images)));
              }
            });
}

var Actions = /* module */[
  /* Option */Option,
  /* getPics */getPics,
  /* getFacts */getFacts,
  /* getCats */getCats
];

var include = ReactRe.Component[/* Stateful */8];

var componentWillUpdate = include[1];

var componentDidUpdate = include[2];

var componentWillReceiveProps = include[3];

var componentWillUnmount = include[4];

var getInstanceVars = include[5];

var jsPropsToReasonProps = include[6];

var name = "App";

function getInitialState() {
  return /* record */[
          /* cats : [] */0,
          /* loading : false */0
        ];
}

function removeCat(cat, param, _) {
  var state = param[/* state */0];
  var cats = List.map(function (item) {
        var match = +(item === cat);
        if (match !== 0) {
          return /* record */[
                  /* id */item[/* id */0],
                  /* fact */item[/* fact */1],
                  /* image */item[/* image */2],
                  /* isHidden : true */1
                ];
        } else {
          return item;
        }
      }, state[/* cats */0]);
  return /* Some */[/* record */[
            /* cats */cats,
            /* loading */state[/* loading */1]
          ]];
}

function getCats$1(param, _) {
  var setState = param[/* setState */5];
  getCats(/* () */0).then(function (cats) {
        Curry._1(setState, function () {
              return /* record */[
                      /* cats */cats,
                      /* loading : false */0
                    ];
            });
        return Promise.resolve(cats);
      });
  return /* Some */[/* record */[
            /* cats */param[/* state */0][/* cats */0],
            /* loading : true */1
          ]];
}

function componentDidMount(componentBag) {
  return getCats$1(componentBag, /* () */0);
}

function render(param) {
  var updater = param[/* updater */2];
  var match = param[/* state */0];
  var cats = match[/* cats */0];
  return React.createElement("div", {
              className: "cats"
            }, match[/* loading */1] ? React.createElement("span", {
                    className: "loading offset"
                  }, "Loading...") : (
                List.for_all(function (param) {
                      return param[/* isHidden */3];
                    }, cats) ? React.createElement("a", {
                        className: "more-cats offset",
                        href: "#",
                        onClick: Curry._1(updater, getCats$1)
                      }, "Gimme More") : Curry._4(CatList.createElement(cats, function (cat) {
                            return Curry._1(updater, function (param, param$1) {
                                        return removeCat(cat, param, param$1);
                                      });
                          }), /* [] */0, /* None */0, /* None */0, /* () */0)
              ));
}

var App_006 = /* JsProps */include[7];

var App_007 = /* InstanceVars */include[8];

var App = /* module */[
  /* componentWillUpdate */componentWillUpdate,
  /* componentDidUpdate */componentDidUpdate,
  /* componentWillReceiveProps */componentWillReceiveProps,
  /* componentWillUnmount */componentWillUnmount,
  /* getInstanceVars */getInstanceVars,
  /* jsPropsToReasonProps */jsPropsToReasonProps,
  App_006,
  App_007,
  /* name */name,
  /* getInitialState */getInitialState,
  /* removeCat */removeCat,
  /* getCats */getCats$1,
  /* componentDidMount */componentDidMount,
  /* render */render
];

var include$1 = ReactRe.CreateComponent([
      name,
      getInstanceVars,
      getInitialState,
      componentDidMount,
      componentWillReceiveProps,
      componentWillUpdate,
      componentDidUpdate,
      componentWillUnmount,
      jsPropsToReasonProps,
      render
    ]);

var wrapProps = include$1[1];

var createElement = Curry._1(wrapProps, /* () */0);

var Main_001 = /* comp */include$1[0];

var Main = /* module */[
  /* App */App,
  Main_001,
  /* wrapProps */wrapProps,
  /* createElement */createElement
];

ReactDOMRe.renderToElementWithId(Curry._4(createElement, /* [] */0, /* None */0, /* None */0, /* () */0), "root");

exports.Actions = Actions;
exports.Main    = Main;
/* include Not a pure module */
